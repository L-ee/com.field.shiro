<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-2.5.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	">
	<!-- 加载配置信息 -->
	<context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 使用阿里巴巴数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 注意：我用的是Annotation的方式配置的Hibernate，这里的property的name是annotatedClasses -->
		<property name="packagesToScan">
			<list>
				<value>com.linan.shiro.model</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!-- 设置Hibernate方言 -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!-- 是否打印sql -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 格式化sql -->
				<prop key="hibernate.format_sql">true</prop>
				<!-- 是否自动更新表 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.current_session_context_class">thread</prop>
				<!-- 最大抓取深度，如果为0，则关闭默认的外连接抓取。建议值为0-3 -->
				<prop key="hibernate.max_fetch_depth">1</prop>
				<!-- 用于生成有助于调试的注释信息，默认为关闭 -->
				<prop key="hibernate.use_sql_comments">true</prop>
			</props>
		</property>
	</bean>

	<!-- 注解扫描 -->
	<context:component-scan base-package="com.linan.shiro.dao,com.linan.shiro.service" />

	<!-- Realm实现 -->
	<bean id="userRealm" class="com.linan.shiro.realm.LoginRealm">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
	</bean>

	<!-- Shiro的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/index.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<property name="filterChainDefinitions">
			<value>
				/index.jsp = anon
				/login/load=anon
				/user/findPermission=anon
				/unauthorized.jsp = anon
				/login.jsp = authc
				/logout = logout
				/css/** = anon
				/images/** = anon
				/js/** = anon
			</value>
		</property>
	</bean>

	<!-- <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager" 
		> <property name="sessionFactory" ref="sessionFactory"></property> </bean> 
		<aop:config> <aop:pointcut id="txMethod" expression="execution(* com.linan.shiro.dao.impl.*.*(..))" 
		/> <aop:advisor advice-ref="txAdvice" pointcut-ref="txMethod"/> </aop:config> -->

	<!-- AOP切面声明事务管理 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="save*" propagation="REQUIRED" /> 支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
		这是最常见的方式 <tx:method name="update*" propagation="REQUIRED" />支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
		这是最常见的方式 <tx:method name="add*" propagation="REQUIRED" />支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
		这是最常见的方式 <tx:method name="delete*" propagation="REQUIRED" />支持当前事务，如果执行到save开头的任何方法时没有事务则开启一个事务 
		这是最常见的方式 <tx:method name="find*" propagation="SUPPORTS" read-only="true"/> 
		支持当前事务，如果当前没有事务，就以非事务方式执行。只读 <tx:method name="get*" propagation="SUPPORTS" 
		read-only="true"/>支持当前事务，如果当前没有事务，就以非事务方式执行。只读 <tx:method name="*" /> </tx:attributes> 
		</tx:advice> -->






</beans>